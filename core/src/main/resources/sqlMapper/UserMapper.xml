<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xuersheng.myProject.mapper.UserMapper">
  <resultMap id="BaseResultMap" type="com.xuersheng.myProject.model.User">
    <id column="u_id" jdbcType="BIGINT" property="id" />
    <result column="u_avatar_id" jdbcType="BIGINT" property="avatarId" />
    <result column="u_email" jdbcType="VARCHAR" property="email" />
    <result column="u_password" jdbcType="VARCHAR" property="password" />
    <result column="u_username" jdbcType="VARCHAR" property="username" />
    <result column="u_dept_id" jdbcType="BIGINT" property="deptId" />
    <result column="u_phone" jdbcType="VARCHAR" property="phone" />
    <result column="u_job_id" jdbcType="BIGINT" property="jobId" />
    <result column="u_create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="u_last_password_reset_time" jdbcType="TIMESTAMP" property="lastPasswordResetTime" />
    <result column="u_nick_name" jdbcType="VARCHAR" property="nickName" />
    <result column="u_sex" jdbcType="VARCHAR" property="sex" />
    <result column="u_deleted" jdbcType="BIT" property="deleted" />
    <result column="u_locked" jdbcType="BIT" property="locked" />
    <result column="u_enabled" jdbcType="BIT" property="enabled" />
    <result column="u_version" jdbcType="INTEGER" property="version" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    u.id as u_id, u.avatar_id as u_avatar_id, u.email as u_email, u.password as u_password, 
    u.username as u_username, u.dept_id as u_dept_id, u.phone as u_phone, u.job_id as u_job_id, 
    u.create_time as u_create_time, u.last_password_reset_time as u_last_password_reset_time, 
    u.nick_name as u_nick_name, u.sex as u_sex, u.deleted as u_deleted, u.locked as u_locked, 
    u.enabled as u_enabled, u.version as u_version
  </sql>
  <select id="selectByExample" parameterType="com.xuersheng.myProject.model.example.UserExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from user u
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from user u
    where u.id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from user
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.xuersheng.myProject.model.example.UserExample">
    delete from user u
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.xuersheng.myProject.model.User">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into user (avatar_id, email, password, 
      username, dept_id, phone, 
      job_id, create_time, last_password_reset_time, 
      nick_name, sex, deleted, 
      locked, enabled, version)
    values (#{avatarId,jdbcType=BIGINT}, #{email,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, 
      #{username,jdbcType=VARCHAR}, #{deptId,jdbcType=BIGINT}, #{phone,jdbcType=VARCHAR}, 
      #{jobId,jdbcType=BIGINT}, #{createTime,jdbcType=TIMESTAMP}, #{lastPasswordResetTime,jdbcType=TIMESTAMP}, 
      #{nickName,jdbcType=VARCHAR}, #{sex,jdbcType=VARCHAR}, #{deleted,jdbcType=BIT}, 
      #{locked,jdbcType=BIT}, #{enabled,jdbcType=BIT}, #{version,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.xuersheng.myProject.model.User">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="avatarId != null">
        avatar_id,
      </if>
      <if test="email != null">
        email,
      </if>
      <if test="password != null">
        password,
      </if>
      <if test="username != null">
        username,
      </if>
      <if test="deptId != null">
        dept_id,
      </if>
      <if test="phone != null">
        phone,
      </if>
      <if test="jobId != null">
        job_id,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="lastPasswordResetTime != null">
        last_password_reset_time,
      </if>
      <if test="nickName != null">
        nick_name,
      </if>
      <if test="sex != null">
        sex,
      </if>
      <if test="deleted != null">
        deleted,
      </if>
      <if test="locked != null">
        locked,
      </if>
      <if test="enabled != null">
        enabled,
      </if>
      <if test="version != null">
        version,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="avatarId != null">
        #{avatarId,jdbcType=BIGINT},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="username != null">
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="deptId != null">
        #{deptId,jdbcType=BIGINT},
      </if>
      <if test="phone != null">
        #{phone,jdbcType=VARCHAR},
      </if>
      <if test="jobId != null">
        #{jobId,jdbcType=BIGINT},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="lastPasswordResetTime != null">
        #{lastPasswordResetTime,jdbcType=TIMESTAMP},
      </if>
      <if test="nickName != null">
        #{nickName,jdbcType=VARCHAR},
      </if>
      <if test="sex != null">
        #{sex,jdbcType=VARCHAR},
      </if>
      <if test="deleted != null">
        #{deleted,jdbcType=BIT},
      </if>
      <if test="locked != null">
        #{locked,jdbcType=BIT},
      </if>
      <if test="enabled != null">
        #{enabled,jdbcType=BIT},
      </if>
      <if test="version != null">
        #{version,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.xuersheng.myProject.model.example.UserExample" resultType="java.lang.Long">
    select count(*) from user u
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update user u
    <set>
      <if test="record.id != null">
        u.id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.avatarId != null">
        u.avatar_id = #{record.avatarId,jdbcType=BIGINT},
      </if>
      <if test="record.email != null">
        u.email = #{record.email,jdbcType=VARCHAR},
      </if>
      <if test="record.password != null">
        u.password = #{record.password,jdbcType=VARCHAR},
      </if>
      <if test="record.username != null">
        u.username = #{record.username,jdbcType=VARCHAR},
      </if>
      <if test="record.deptId != null">
        u.dept_id = #{record.deptId,jdbcType=BIGINT},
      </if>
      <if test="record.phone != null">
        u.phone = #{record.phone,jdbcType=VARCHAR},
      </if>
      <if test="record.jobId != null">
        u.job_id = #{record.jobId,jdbcType=BIGINT},
      </if>
      <if test="record.createTime != null">
        u.create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.lastPasswordResetTime != null">
        u.last_password_reset_time = #{record.lastPasswordResetTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.nickName != null">
        u.nick_name = #{record.nickName,jdbcType=VARCHAR},
      </if>
      <if test="record.sex != null">
        u.sex = #{record.sex,jdbcType=VARCHAR},
      </if>
      <if test="record.deleted != null">
        u.deleted = #{record.deleted,jdbcType=BIT},
      </if>
      <if test="record.locked != null">
        u.locked = #{record.locked,jdbcType=BIT},
      </if>
      <if test="record.enabled != null">
        u.enabled = #{record.enabled,jdbcType=BIT},
      </if>
      <if test="record.version != null">
        u.version = #{record.version,jdbcType=INTEGER},
      </if>
    </set>
    <if test="example != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update user u
    set u.id = #{record.id,jdbcType=BIGINT},
      u.avatar_id = #{record.avatarId,jdbcType=BIGINT},
      u.email = #{record.email,jdbcType=VARCHAR},
      u.password = #{record.password,jdbcType=VARCHAR},
      u.username = #{record.username,jdbcType=VARCHAR},
      u.dept_id = #{record.deptId,jdbcType=BIGINT},
      u.phone = #{record.phone,jdbcType=VARCHAR},
      u.job_id = #{record.jobId,jdbcType=BIGINT},
      u.create_time = #{record.createTime,jdbcType=TIMESTAMP},
      u.last_password_reset_time = #{record.lastPasswordResetTime,jdbcType=TIMESTAMP},
      u.nick_name = #{record.nickName,jdbcType=VARCHAR},
      u.sex = #{record.sex,jdbcType=VARCHAR},
      u.deleted = #{record.deleted,jdbcType=BIT},
      u.locked = #{record.locked,jdbcType=BIT},
      u.enabled = #{record.enabled,jdbcType=BIT},
      u.version = #{record.version,jdbcType=INTEGER}
    <if test="example != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.xuersheng.myProject.model.User">
    update user
    <set>
      <if test="avatarId != null">
        avatar_id = #{avatarId,jdbcType=BIGINT},
      </if>
      <if test="email != null">
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="username != null">
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="deptId != null">
        dept_id = #{deptId,jdbcType=BIGINT},
      </if>
      <if test="phone != null">
        phone = #{phone,jdbcType=VARCHAR},
      </if>
      <if test="jobId != null">
        job_id = #{jobId,jdbcType=BIGINT},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="lastPasswordResetTime != null">
        last_password_reset_time = #{lastPasswordResetTime,jdbcType=TIMESTAMP},
      </if>
      <if test="nickName != null">
        nick_name = #{nickName,jdbcType=VARCHAR},
      </if>
      <if test="sex != null">
        sex = #{sex,jdbcType=VARCHAR},
      </if>
      <if test="deleted != null">
        deleted = #{deleted,jdbcType=BIT},
      </if>
      <if test="locked != null">
        locked = #{locked,jdbcType=BIT},
      </if>
      <if test="enabled != null">
        enabled = #{enabled,jdbcType=BIT},
      </if>
      <if test="version != null">
        version = #{version,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.xuersheng.myProject.model.User">
    update user
    set avatar_id = #{avatarId,jdbcType=BIGINT},
      email = #{email,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      username = #{username,jdbcType=VARCHAR},
      dept_id = #{deptId,jdbcType=BIGINT},
      phone = #{phone,jdbcType=VARCHAR},
      job_id = #{jobId,jdbcType=BIGINT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      last_password_reset_time = #{lastPasswordResetTime,jdbcType=TIMESTAMP},
      nick_name = #{nickName,jdbcType=VARCHAR},
      sex = #{sex,jdbcType=VARCHAR},
      deleted = #{deleted,jdbcType=BIT},
      locked = #{locked,jdbcType=BIT},
      enabled = #{enabled,jdbcType=BIT},
      version = #{version,jdbcType=INTEGER}
    where id = #{id,jdbcType=BIGINT}
  </update>

  <resultMap extends="com.xuersheng.myProject.mapper.UserMapper.BaseResultMap" id="CusResultMap" type="com.xuersheng.myProject.model.User">
    <association column="u_id" foreignColumn="us_user_id" property="userSetting" resultMap="com.xuersheng.myProject.mapper.UserSettingMapper.BaseResultMap">
    </association>
    <collection column="u_id" foreignColumn="ur_user_id" property="roles" resultMap="com.xuersheng.myProject.mapper.RoleMapper.BaseResultMap">
    </collection>
  </resultMap>
  <resultMap extends="com.xuersheng.myProject.mapper.UserMapper.BaseResultMap" id="UserAndRoleIdMap" type="com.xuersheng.myProject.model.User">
    <collection ofType="java.lang.Long" property="roleIds">
      <constructor>
        <arg column="role_id" />
      </constructor>
    </collection>
  </resultMap>

  <select id="selectUserDetailById" resultMap="CusResultMap">
    SELECT
    <include refid="com.xuersheng.myProject.mapper.UserMapper.Base_Column_List" />,
    <include refid="com.xuersheng.myProject.mapper.UserSettingMapper.Base_Column_List" />,
    <include refid="com.xuersheng.myProject.mapper.UsersRolesMapper.Base_Column_List" />,
    <include refid="com.xuersheng.myProject.mapper.RoleMapper.Base_Column_List" />
    FROM user u
    LEFT JOIN user_setting us ON u.id = us.user_id
    LEFT JOIN users_roles ur ON u.id = ur.user_id
    LEFT JOIN role r ON ur.role_id = r.id
    <where>
      u.id = #{id}
      AND (us.deleted = false OR us.deleted IS NULL)
      AND (ur.deleted = false OR ur.deleted IS NULL)
      AND (r.deleted = false OR r.deleted IS NULL)
      AND (r.locked = false OR r.deleted IS NULL)
    </where>
  </select>

  <select id="selectUserByDto" resultMap="UserAndRoleIdMap">
    SELECT<include refid="com.xuersheng.myProject.mapper.UserMapper.Base_Column_List" />,
    ur.role_id
    FROM user u
    LEFT JOIN users_roles ur ON u.id = ur.user_id
    WHERE (u.deleted = 0 OR u.deleted IS NULL)
    AND (ur.deleted = 0 OR ur.deleted IS NULL)
  </select>

</mapper>